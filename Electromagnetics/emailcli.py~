# emailcli.py


__all__ = ["ImapClient"]

import sys
import imaplib
imaplib._MAXLINE = 200000
import getpass
import email
import datetime
import quopri
from email.message import Message



class ImapClient:
    
    def __init__(self, n_mail=10):
        self.NumberOfMails = n_mail ##number of mails to show
        return
        
        
    def setmailserver(self, server):
        self.imapserver = server
        
    def setUserPass(self, user, password):
        self.user = user
        self.password = password
        
    def login(self):
        self.mailImap = imaplib.IMAP4_SSL(self.imapserver)
        try:
            self.mailImap.login(self.user, self.password)
        except imaplib.IMAP4.error:
            print("LOGIN FAILED!!! ")

    def getMailBoxes(self):
        resp, mailboxes = self.mailImap.list()
        if resp == 'OK':
            print("Mailboxes:")
            mailboxes_byline = '\n'.join(map(str, mailboxes))
            print(mailboxes_byline)

    def selectMailbox(self, mailbox):
        resp, data = self.mailImap.select(mailbox)
        if resp == 'OK':
            print("mailbox {} selected".format(mailbox))
            
    def closeMail(self):
        self.mailImap.close()
        
    def logout(self):
        self.mailImap.logout()
        

    def processMailbox(self):
        resp, data = self.mailImap.uid('search', None, "ALL")
        if resp != 'OK':
          print("No messages found!")
          return
        
        n_read = self.NumberOfMails
        data_split = data[0].split()
        n_mail = len(data_split)
        print('number of emails:', len(data_split))
        msg_ids = list(reversed(data_split))[0:min(n_read, n_mail)]
        for m_id in msg_ids:
            m_id = m_id.decode('utf-8')
            print('ID: ', m_id)

            resp, data = self,mailImap.uid('fetch', m_id, '(BODY.PEEK[HEADER])')
            # FLAGS INTERNALDATE ENVELOPE BODY.PEEK[HEADER] BODY.PEEK[TEXT] RFC822 RFC822.SIZE

            if resp != 'OK':
                print("ERROR getting message", m_id)
                return
                    
            msg = email.message_from_string(data[0][1].decode('latin-1'))

            print('Raw Date:', msg['Date'])
            date_tuple = email.utils.parsedate_tz(msg['Date'])
            if date_tuple:
                local_date = datetime.datetime.fromtimestamp(email.utils.mktime_tz(date_tuple))
                print("Local Date:", local_date.strftime("%a, %d %b %Y %H:%M:%S"))
            print('Subject %s: %s' % (num, msg['Subject']))
            print('To %s: %s' % (num, msg['To']))
            print('From %s: %s' % (num, msg['From']))

            resp, data = self.mailImap.uid('fetch', m_id, '(BODY.PEEK[TEXT])')
            if resp != 'OK':
                print("ERROR getting message", m_id)
                return
            message_body = data[0][1].decode('latin-1')
            print("Message PEEK: \n", message_body[0:500])
            print("="*60)
            
    def readMailBody(self, m_id):
        resp, data = self.mailImap.uid('fetch', m_id, '(RFC822)')
        if resp != 'OK':
            print("ERROR getting message", m_id)
            return
        message_body = data[0][1].decode('latin-1')
        message_body = email.message_from_string(message_body)
        if message_body.get_content_maintype() == 'multipart':
            for part in message_body.walk():       
                if part.get_content_type() == "text/plain":
                    body = part.get_payload(decode=True)
                    print('Message: \n', body.decode('latin-1'))
                else:
                    continue
        
    
    
    
    

